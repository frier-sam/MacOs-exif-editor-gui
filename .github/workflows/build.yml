name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.1)'
        required: true
        default: '1.0.0'

permissions:
  contents: write
  actions: read

jobs:
  build:
    runs-on: macos-12  # Use macOS 12 for better universal binary support
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install universal Python and dependencies
      run: |
        # Ensure we have universal Python
        python -m pip install --upgrade pip
        
        # Install universal2 wheels where available
        pip install --upgrade --force-reinstall --no-binary :all: wheel setuptools
        pip install --upgrade --force-reinstall Pillow
        pip install -r requirements.txt
        pip install py2app
        
    - name: Install build tools
      run: |
        brew install exiftool
        brew install create-dmg
        
    - name: Generate app icon
      run: |
        if [ -f "generate_icon.py" ]; then
          python generate_icon.py || echo "Warning: Icon generation failed, using default"
        fi
        
    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        elif [[ "${{ github.event.inputs.version }}" != "" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="1.0.0"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version $VERSION"
        
    - name: Update version in files
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        # Update version in setup.py
        sed -i '' "s/VERSION = '.*'/VERSION = '$VERSION'/g" setup.py
        # Update version in build.sh
        sed -i '' "s/VERSION=\".*\"/VERSION=\"$VERSION\"/g" build.sh
        
    - name: Build application
      run: |
        chmod +x build.sh
        ./build.sh
        
    - name: Code sign application (if certificate available)
      if: env.MACOS_CERTIFICATE && env.MACOS_CERTIFICATE_PWD
      run: |
        # Import certificate
        echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
        security create-keychain -p actions build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p actions build.keychain
        security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k actions build.keychain
        
        # Sign the app
        codesign --deep --force --verify --verbose --sign "$MACOS_IDENTITY" "dist/ExifTool GUI.app"
      env:
        MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
        MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        MACOS_IDENTITY: ${{ secrets.MACOS_IDENTITY }}
        
    - name: Verify build outputs
      run: |
        ls -la *.dmg *.pkg *.zip || true
        echo "Contents of dist folder:"
        ls -la dist/
        
    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: ExifToolGUI-${{ steps.version.outputs.VERSION }}-macOS.dmg
        path: ExifToolGUI-*.dmg
        
    - name: Upload PKG artifact
      uses: actions/upload-artifact@v4
      with:
        name: ExifToolGUI-${{ steps.version.outputs.VERSION }}-macOS.pkg
        path: ExifToolGUI-*.pkg
        
    - name: Upload ZIP artifact
      uses: actions/upload-artifact@v4
      with:
        name: ExifToolGUI-${{ steps.version.outputs.VERSION }}-macOS.zip
        path: ExifToolGUI-*.zip
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        name: ExifTool GUI ${{ steps.version.outputs.VERSION }}
        files: |
          ExifToolGUI-*.dmg
          ExifToolGUI-*.pkg
          ExifToolGUI-*.zip
        body: |
          ## ExifTool GUI ${{ steps.version.outputs.VERSION }}
          
          ### üì¶ Download Options
          
          | File | Description | Size |
          |------|-------------|------|
          | **ExifToolGUI-${{ steps.version.outputs.VERSION }}.dmg** | Recommended for most users | ~XX MB |
          | **ExifToolGUI-${{ steps.version.outputs.VERSION }}.pkg** | For automated deployment | ~XX MB |
          | **ExifToolGUI-${{ steps.version.outputs.VERSION }}.zip** | Manual installation | ~XX MB |
          
          ### üöÄ Installation
          
          #### DMG Installation (Recommended)
          1. Download `ExifToolGUI-${{ steps.version.outputs.VERSION }}.dmg`
          2. Double-click to mount the DMG
          3. Drag **ExifTool GUI** to your Applications folder
          4. Eject the DMG
          5. Right-click the app and select "Open" the first time
          
          #### PKG Installation
          1. Download `ExifToolGUI-${{ steps.version.outputs.VERSION }}.pkg`
          2. Double-click to run the installer
          3. Follow the installation wizard
          
          ### üìã Requirements
          
          - macOS 10.15 (Catalina) or later
          - ExifTool must be installed:
            ```bash
            brew install exiftool
            ```
          
          ### ‚ú® What's New in ${{ steps.version.outputs.VERSION }}
          
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          
          ### üêõ Known Issues
          
          - First launch may require right-click ‚Üí Open due to macOS security
          - If ExifTool is not found, ensure it's in your PATH
          
          ### üìù License
          
          This software is released under the MIT License.
          
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}